name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m venv .venv  # Create virtual environment
          source .venv/bin/activate  # Activate virtual environment
          python -m pip install --upgrade pip
          pip install -r webapp/requirements.txt  # Install dependencies from requirements.txt
          # Install Playwright browser binaries
          pip install pytest-playwright
          playwright install

      # Step 4: Start Flask app in the background
      - name: Start Flask app
        run: |
          python webapp/app.py &  # Start Flask app in background
        continue-on-error: true  # Ensure the pipeline continues even if the Flask app startup fails

      # Step 5: Run Playwright UI tests
      - name: Run Playwright UI tests
        run: |
          pytest login_page.py  # Run the Playwright tests
          pytest welcome_page.py

      # Step 6: Run Playwright APItests
      - name: Run Playwright API tests
        run: |
          pytest api_test.py --junitxml=pytest-results.xml # Run the Playwright tests

      # Step 7: Collect Test Results (Optional)
      - name: Upload Test Results
        if: failure()  # Only if the tests fail
        uses: actions/upload-artifact@v3
        with:
          name: test-results  # Artifact name
          path: pytest-results.xml  # Path to the test results

      - name: Run tests
        run: |
          pytest tests/

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Deploy Application
        run: |
          echo "Deployment successful!"  # Replace with actual deployment command
